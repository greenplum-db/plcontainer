/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: plcontainer.proto */

#ifndef PROTOBUF_C_plcontainer_2eproto__INCLUDED
#define PROTOBUF_C_plcontainer_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Plcontainer__ProcSrc Plcontainer__ProcSrc;
typedef struct _Plcontainer__PlcType Plcontainer__PlcType;
typedef struct _Plcontainer__RawData Plcontainer__RawData;
typedef struct _Plcontainer__Argument Plcontainer__Argument;
typedef struct _Plcontainer__Header Plcontainer__Header;
typedef struct _Plcontainer__Ping Plcontainer__Ping;
typedef struct _Plcontainer__Error Plcontainer__Error;
typedef struct _Plcontainer__CallRequest Plcontainer__CallRequest;
typedef struct _Plcontainer__Result Plcontainer__Result;
typedef struct _Plcontainer__Log Plcontainer__Log;
typedef struct _Plcontainer__Quote Plcontainer__Quote;
typedef struct _Plcontainer__QuoteResult Plcontainer__QuoteResult;
typedef struct _Plcontainer__SQL Plcontainer__SQL;
typedef struct _Plcontainer__Raw Plcontainer__Raw;
typedef struct _Plcontainer__Subtransaction Plcontainer__Subtransaction;
typedef struct _Plcontainer__SubtransactionResult Plcontainer__SubtransactionResult;


/* --- enums --- */

typedef enum _Plcontainer__SQL__SqlType {
  PLCONTAINER__SQL__SQL_TYPE__INVALID = 0,
  PLCONTAINER__SQL__SQL_TYPE__STATEMENT = 1,
  PLCONTAINER__SQL__SQL_TYPE__CURSOR_CLOSE = 2,
  PLCONTAINER__SQL__SQL_TYPE__FETCH = 3,
  PLCONTAINER__SQL__SQL_TYPE__CURSOR_OPEN = 4,
  PLCONTAINER__SQL__SQL_TYPE__PREPARE = 5,
  PLCONTAINER__SQL__SQL_TYPE__PEXECUTE = 6,
  PLCONTAINER__SQL__SQL_TYPE__UNPREPARE = 7,
  PLCONTAINER__SQL__SQL_TYPE__MAX = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PLCONTAINER__SQL__SQL_TYPE)
} Plcontainer__SQL__SqlType;
typedef enum _Plcontainer__DataType {
  PLCONTAINER__DATA_TYPE__INT1 = 0,
  PLCONTAINER__DATA_TYPE__INT2 = 1,
  PLCONTAINER__DATA_TYPE__INT4 = 2,
  PLCONTAINER__DATA_TYPE__INT8 = 3,
  PLCONTAINER__DATA_TYPE__FLOAT4 = 4,
  PLCONTAINER__DATA_TYPE__FLOAT8 = 5,
  PLCONTAINER__DATA_TYPE__TEXT = 6,
  PLCONTAINER__DATA_TYPE__ARRAY = 7,
  PLCONTAINER__DATA_TYPE__UDT = 8,
  PLCONTAINER__DATA_TYPE__BYTEA = 9,
  PLCONTAINER__DATA_TYPE__INVALID = 10,
  PLCONTAINER__DATA_TYPE__MAX = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PLCONTAINER__DATA_TYPE)
} Plcontainer__DataType;
typedef enum _Plcontainer__QuoteType {
  PLCONTAINER__QUOTE_TYPE__LITERAL = 0,
  PLCONTAINER__QUOTE_TYPE__NULLABLE = 1,
  PLCONTAINER__QUOTE_TYPE__IDENT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PLCONTAINER__QUOTE_TYPE)
} Plcontainer__QuoteType;

/* --- messages --- */

struct  _Plcontainer__ProcSrc
{
  ProtobufCMessage base;
  char *src;
  char *name;
};
#define PLCONTAINER__PROC_SRC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__proc_src__descriptor) \
    , NULL, NULL }


struct  _Plcontainer__PlcType
{
  ProtobufCMessage base;
  Plcontainer__DataType type;
  int32_t nsubtypes;
  char *typename_;
  Plcontainer__PlcType *subtypes;
};
#define PLCONTAINER__PLC_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__plc_type__descriptor) \
    , PLCONTAINER__DATA_TYPE__INT1, 0, NULL, NULL }


struct  _Plcontainer__RawData
{
  ProtobufCMessage base;
  int32_t isnull;
  ProtobufCBinaryData value;
};
#define PLCONTAINER__RAW_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__raw_data__descriptor) \
    , 0, {0,NULL} }


struct  _Plcontainer__Argument
{
  ProtobufCMessage base;
  Plcontainer__PlcType *type;
  char *name;
  Plcontainer__RawData *data;
};
#define PLCONTAINER__ARGUMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__argument__descriptor) \
    , NULL, NULL, NULL }


struct  _Plcontainer__Header
{
  ProtobufCMessage base;
  uint32_t message_type;
  uint32_t message_length;
};
#define PLCONTAINER__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__header__descriptor) \
    , 0, 0 }


struct  _Plcontainer__Ping
{
  ProtobufCMessage base;
  char *version;
};
#define PLCONTAINER__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__ping__descriptor) \
    , NULL }


struct  _Plcontainer__Error
{
  ProtobufCMessage base;
  char *message;
  char *stacktrace;
};
#define PLCONTAINER__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__error__descriptor) \
    , NULL, NULL }


struct  _Plcontainer__CallRequest
{
  ProtobufCMessage base;
  uint32_t objectid;
  int32_t haschanged;
  Plcontainer__ProcSrc *proc;
  int32_t loglevel;
  Plcontainer__PlcType *rettype;
  int32_t retset;
  int32_t nargs;
  char *serverenc;
  size_t n_args;
  Plcontainer__Argument **args;
};
#define PLCONTAINER__CALL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__call_request__descriptor) \
    , 0, 0, NULL, 0, NULL, 0, 0, NULL, 0,NULL }


struct  _Plcontainer__Result
{
  ProtobufCMessage base;
  uint32_t rows;
  uint32_t cols;
  size_t n_types;
  Plcontainer__PlcType **types;
  size_t n_names;
  char **names;
  size_t n_data;
  Plcontainer__RawData **data;
  Plcontainer__Error *exception;
};
#define PLCONTAINER__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__result__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL, NULL }


struct  _Plcontainer__Log
{
  ProtobufCMessage base;
  int32_t level;
  char *message;
};
#define PLCONTAINER__LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__log__descriptor) \
    , 0, NULL }


struct  _Plcontainer__Quote
{
  ProtobufCMessage base;
  Plcontainer__QuoteType quote_type;
  char *msg;
};
#define PLCONTAINER__QUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__quote__descriptor) \
    , PLCONTAINER__QUOTE_TYPE__LITERAL, NULL }


struct  _Plcontainer__QuoteResult
{
  ProtobufCMessage base;
  Plcontainer__QuoteType quote_type;
  char *result;
};
#define PLCONTAINER__QUOTE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__quote_result__descriptor) \
    , PLCONTAINER__QUOTE_TYPE__LITERAL, NULL }


struct  _Plcontainer__SQL
{
  ProtobufCMessage base;
  Plcontainer__SQL__SqlType sqltype;
  size_t n_args;
  Plcontainer__Argument **args;
  int64_t limit;
  int64_t pplan;
  char *statement;
  protobuf_c_boolean has_nargs;
  int32_t nargs;
};
#define PLCONTAINER__SQL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__sql__descriptor) \
    , PLCONTAINER__SQL__SQL_TYPE__INVALID, 0,NULL, 0, 0, NULL, 0, 0 }


struct  _Plcontainer__Raw
{
  ProtobufCMessage base;
  int32_t size;
  ProtobufCBinaryData data;
};
#define PLCONTAINER__RAW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__raw__descriptor) \
    , 0, {0,NULL} }


struct  _Plcontainer__Subtransaction
{
  ProtobufCMessage base;
  char *action;
  char *type;
};
#define PLCONTAINER__SUBTRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__subtransaction__descriptor) \
    , NULL, NULL }


struct  _Plcontainer__SubtransactionResult
{
  ProtobufCMessage base;
  int32_t result;
};
#define PLCONTAINER__SUBTRANSACTION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plcontainer__subtransaction_result__descriptor) \
    , 0 }


/* Plcontainer__ProcSrc methods */
void   plcontainer__proc_src__init
                     (Plcontainer__ProcSrc         *message);
size_t plcontainer__proc_src__get_packed_size
                     (const Plcontainer__ProcSrc   *message);
size_t plcontainer__proc_src__pack
                     (const Plcontainer__ProcSrc   *message,
                      uint8_t             *out);
size_t plcontainer__proc_src__pack_to_buffer
                     (const Plcontainer__ProcSrc   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__ProcSrc *
       plcontainer__proc_src__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__proc_src__free_unpacked
                     (Plcontainer__ProcSrc *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__PlcType methods */
void   plcontainer__plc_type__init
                     (Plcontainer__PlcType         *message);
size_t plcontainer__plc_type__get_packed_size
                     (const Plcontainer__PlcType   *message);
size_t plcontainer__plc_type__pack
                     (const Plcontainer__PlcType   *message,
                      uint8_t             *out);
size_t plcontainer__plc_type__pack_to_buffer
                     (const Plcontainer__PlcType   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__PlcType *
       plcontainer__plc_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__plc_type__free_unpacked
                     (Plcontainer__PlcType *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__RawData methods */
void   plcontainer__raw_data__init
                     (Plcontainer__RawData         *message);
size_t plcontainer__raw_data__get_packed_size
                     (const Plcontainer__RawData   *message);
size_t plcontainer__raw_data__pack
                     (const Plcontainer__RawData   *message,
                      uint8_t             *out);
size_t plcontainer__raw_data__pack_to_buffer
                     (const Plcontainer__RawData   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__RawData *
       plcontainer__raw_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__raw_data__free_unpacked
                     (Plcontainer__RawData *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Argument methods */
void   plcontainer__argument__init
                     (Plcontainer__Argument         *message);
size_t plcontainer__argument__get_packed_size
                     (const Plcontainer__Argument   *message);
size_t plcontainer__argument__pack
                     (const Plcontainer__Argument   *message,
                      uint8_t             *out);
size_t plcontainer__argument__pack_to_buffer
                     (const Plcontainer__Argument   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Argument *
       plcontainer__argument__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__argument__free_unpacked
                     (Plcontainer__Argument *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Header methods */
void   plcontainer__header__init
                     (Plcontainer__Header         *message);
size_t plcontainer__header__get_packed_size
                     (const Plcontainer__Header   *message);
size_t plcontainer__header__pack
                     (const Plcontainer__Header   *message,
                      uint8_t             *out);
size_t plcontainer__header__pack_to_buffer
                     (const Plcontainer__Header   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Header *
       plcontainer__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__header__free_unpacked
                     (Plcontainer__Header *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Ping methods */
void   plcontainer__ping__init
                     (Plcontainer__Ping         *message);
size_t plcontainer__ping__get_packed_size
                     (const Plcontainer__Ping   *message);
size_t plcontainer__ping__pack
                     (const Plcontainer__Ping   *message,
                      uint8_t             *out);
size_t plcontainer__ping__pack_to_buffer
                     (const Plcontainer__Ping   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Ping *
       plcontainer__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__ping__free_unpacked
                     (Plcontainer__Ping *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Error methods */
void   plcontainer__error__init
                     (Plcontainer__Error         *message);
size_t plcontainer__error__get_packed_size
                     (const Plcontainer__Error   *message);
size_t plcontainer__error__pack
                     (const Plcontainer__Error   *message,
                      uint8_t             *out);
size_t plcontainer__error__pack_to_buffer
                     (const Plcontainer__Error   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Error *
       plcontainer__error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__error__free_unpacked
                     (Plcontainer__Error *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__CallRequest methods */
void   plcontainer__call_request__init
                     (Plcontainer__CallRequest         *message);
size_t plcontainer__call_request__get_packed_size
                     (const Plcontainer__CallRequest   *message);
size_t plcontainer__call_request__pack
                     (const Plcontainer__CallRequest   *message,
                      uint8_t             *out);
size_t plcontainer__call_request__pack_to_buffer
                     (const Plcontainer__CallRequest   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__CallRequest *
       plcontainer__call_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__call_request__free_unpacked
                     (Plcontainer__CallRequest *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Result methods */
void   plcontainer__result__init
                     (Plcontainer__Result         *message);
size_t plcontainer__result__get_packed_size
                     (const Plcontainer__Result   *message);
size_t plcontainer__result__pack
                     (const Plcontainer__Result   *message,
                      uint8_t             *out);
size_t plcontainer__result__pack_to_buffer
                     (const Plcontainer__Result   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Result *
       plcontainer__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__result__free_unpacked
                     (Plcontainer__Result *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Log methods */
void   plcontainer__log__init
                     (Plcontainer__Log         *message);
size_t plcontainer__log__get_packed_size
                     (const Plcontainer__Log   *message);
size_t plcontainer__log__pack
                     (const Plcontainer__Log   *message,
                      uint8_t             *out);
size_t plcontainer__log__pack_to_buffer
                     (const Plcontainer__Log   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Log *
       plcontainer__log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__log__free_unpacked
                     (Plcontainer__Log *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Quote methods */
void   plcontainer__quote__init
                     (Plcontainer__Quote         *message);
size_t plcontainer__quote__get_packed_size
                     (const Plcontainer__Quote   *message);
size_t plcontainer__quote__pack
                     (const Plcontainer__Quote   *message,
                      uint8_t             *out);
size_t plcontainer__quote__pack_to_buffer
                     (const Plcontainer__Quote   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Quote *
       plcontainer__quote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__quote__free_unpacked
                     (Plcontainer__Quote *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__QuoteResult methods */
void   plcontainer__quote_result__init
                     (Plcontainer__QuoteResult         *message);
size_t plcontainer__quote_result__get_packed_size
                     (const Plcontainer__QuoteResult   *message);
size_t plcontainer__quote_result__pack
                     (const Plcontainer__QuoteResult   *message,
                      uint8_t             *out);
size_t plcontainer__quote_result__pack_to_buffer
                     (const Plcontainer__QuoteResult   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__QuoteResult *
       plcontainer__quote_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__quote_result__free_unpacked
                     (Plcontainer__QuoteResult *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__SQL methods */
void   plcontainer__sql__init
                     (Plcontainer__SQL         *message);
size_t plcontainer__sql__get_packed_size
                     (const Plcontainer__SQL   *message);
size_t plcontainer__sql__pack
                     (const Plcontainer__SQL   *message,
                      uint8_t             *out);
size_t plcontainer__sql__pack_to_buffer
                     (const Plcontainer__SQL   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__SQL *
       plcontainer__sql__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__sql__free_unpacked
                     (Plcontainer__SQL *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Raw methods */
void   plcontainer__raw__init
                     (Plcontainer__Raw         *message);
size_t plcontainer__raw__get_packed_size
                     (const Plcontainer__Raw   *message);
size_t plcontainer__raw__pack
                     (const Plcontainer__Raw   *message,
                      uint8_t             *out);
size_t plcontainer__raw__pack_to_buffer
                     (const Plcontainer__Raw   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Raw *
       plcontainer__raw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__raw__free_unpacked
                     (Plcontainer__Raw *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__Subtransaction methods */
void   plcontainer__subtransaction__init
                     (Plcontainer__Subtransaction         *message);
size_t plcontainer__subtransaction__get_packed_size
                     (const Plcontainer__Subtransaction   *message);
size_t plcontainer__subtransaction__pack
                     (const Plcontainer__Subtransaction   *message,
                      uint8_t             *out);
size_t plcontainer__subtransaction__pack_to_buffer
                     (const Plcontainer__Subtransaction   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__Subtransaction *
       plcontainer__subtransaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__subtransaction__free_unpacked
                     (Plcontainer__Subtransaction *message,
                      ProtobufCAllocator *allocator);
/* Plcontainer__SubtransactionResult methods */
void   plcontainer__subtransaction_result__init
                     (Plcontainer__SubtransactionResult         *message);
size_t plcontainer__subtransaction_result__get_packed_size
                     (const Plcontainer__SubtransactionResult   *message);
size_t plcontainer__subtransaction_result__pack
                     (const Plcontainer__SubtransactionResult   *message,
                      uint8_t             *out);
size_t plcontainer__subtransaction_result__pack_to_buffer
                     (const Plcontainer__SubtransactionResult   *message,
                      ProtobufCBuffer     *buffer);
Plcontainer__SubtransactionResult *
       plcontainer__subtransaction_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plcontainer__subtransaction_result__free_unpacked
                     (Plcontainer__SubtransactionResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Plcontainer__ProcSrc_Closure)
                 (const Plcontainer__ProcSrc *message,
                  void *closure_data);
typedef void (*Plcontainer__PlcType_Closure)
                 (const Plcontainer__PlcType *message,
                  void *closure_data);
typedef void (*Plcontainer__RawData_Closure)
                 (const Plcontainer__RawData *message,
                  void *closure_data);
typedef void (*Plcontainer__Argument_Closure)
                 (const Plcontainer__Argument *message,
                  void *closure_data);
typedef void (*Plcontainer__Header_Closure)
                 (const Plcontainer__Header *message,
                  void *closure_data);
typedef void (*Plcontainer__Ping_Closure)
                 (const Plcontainer__Ping *message,
                  void *closure_data);
typedef void (*Plcontainer__Error_Closure)
                 (const Plcontainer__Error *message,
                  void *closure_data);
typedef void (*Plcontainer__CallRequest_Closure)
                 (const Plcontainer__CallRequest *message,
                  void *closure_data);
typedef void (*Plcontainer__Result_Closure)
                 (const Plcontainer__Result *message,
                  void *closure_data);
typedef void (*Plcontainer__Log_Closure)
                 (const Plcontainer__Log *message,
                  void *closure_data);
typedef void (*Plcontainer__Quote_Closure)
                 (const Plcontainer__Quote *message,
                  void *closure_data);
typedef void (*Plcontainer__QuoteResult_Closure)
                 (const Plcontainer__QuoteResult *message,
                  void *closure_data);
typedef void (*Plcontainer__SQL_Closure)
                 (const Plcontainer__SQL *message,
                  void *closure_data);
typedef void (*Plcontainer__Raw_Closure)
                 (const Plcontainer__Raw *message,
                  void *closure_data);
typedef void (*Plcontainer__Subtransaction_Closure)
                 (const Plcontainer__Subtransaction *message,
                  void *closure_data);
typedef void (*Plcontainer__SubtransactionResult_Closure)
                 (const Plcontainer__SubtransactionResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    plcontainer__data_type__descriptor;
extern const ProtobufCEnumDescriptor    plcontainer__quote_type__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__proc_src__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__plc_type__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__raw_data__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__argument__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__header__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__ping__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__error__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__call_request__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__result__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__log__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__quote__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__quote_result__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__sql__descriptor;
extern const ProtobufCEnumDescriptor    plcontainer__sql__sql_type__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__raw__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__subtransaction__descriptor;
extern const ProtobufCMessageDescriptor plcontainer__subtransaction_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_plcontainer_2eproto__INCLUDED */
