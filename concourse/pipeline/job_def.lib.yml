#@ load("base.lib.yml", "add_res_by_conf", "add_res_by_name")
#@ load("@ytt:template", "template")

#! Use bin_gpdb_postfix="" to use a release version of gpdb binary
#! Job config for centos7
#@ def centos7_gpdb6_conf(release_build=False):
res_test_image: centos7-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_centos7" + ("" if release_build else "_debug")
res_gpdb_src: gpdb6_src
res_intermediates_bin: bin_plcontainer_gpdb6_rhel7_intermediates
os: rhel7
#@ end

#! Job config for centos6
#! Use bin_gpdb_postfix="" to use a release version of gpdb binary
#@ def centos6_gpdb6_conf(release_build=False):
res_test_image: centos6-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_centos6" + ("" if release_build else "_debug")
res_gpdb_src: gpdb6_src
res_intermediates_bin: bin_plcontainer_gpdb6_rhel6_intermediates
os: rhel6
build_type: #@ "Release" if release_build else "Debug"
#@ end

#! Job config for rhel8
#@ def rhel8_gpdb6_conf(release_build=False):
res_test_image: rhel8-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_rhel8" + ("" if release_build else "_debug")
res_gpdb_src: gpdb6_src
res_intermediates_bin: bin_plcontainer_gpdb6_rhel8_intermediates
os: rhel8
#@ end

#! Job config for ubuntu18
#@ def ubuntu18_gpdb6_conf(release_build=False):
res_test_image: ubuntu18-gpdb6-image-test
res_gpdb_src: gpdb6_src
res_gpdb_bin: #@ "bin_gpdb6_ubuntu18" + ("" if release_build else "_debug")
res_intermediates_bin: bin_plcontainer_gpdb6_ubuntu18_intermediates
os: ubuntu18.04
#@ end

#! The entry point of a pipeline. The job name must be 'entrance'.
#@ def entrance_job(param):
#@   trigger = param["trigger"]
name: entrance
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- trigger: #@ trigger["auto_trigger"]
  _: #@ template.replace(to_get)
#@   end
#@   for to_put in trigger["to_put_pre"]:
- #@ to_put
#@   end
#@ end

#@ def exit_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#@ def exit_pr_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit_pr
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#@ def _build_task(conf):
task: #@ "build_" + conf["os"]
privileged: true
config:
  platform: linux
  run:
    path: plcontainer_src/concourse/scripts/entry.sh
    args:
      - build_and_test
  inputs:
    - name: bin_gpdb
    - name: plcontainer_src
    - name: gpdb_src
    - name: bin_cmake
  outputs:
    - name: plcontainer_src
    - name: plcontainer_artifacts
image: #@ conf["res_test_image"]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
#@ end

#@ def build_test_job_name(conf):
#@   return "build_test_" + conf["os"]
#@ end
#@ def build_test_job(param):
#@   res_map = param["res_map"]
#@   trigger = param["trigger"]
#@   conf = param["conf"]
#@   add_res_by_name(res_map, "bin_cmake")
#@   add_res_by_name(res_map, param["gpdb_src"])
#@   add_res_by_conf(res_map, conf)
name: #@ build_test_job_name(conf)
max_in_flight: 10
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: [entrance]
  trigger: true
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
  - get: bin_cmake
  - get: gpdb_src
    resource: #@ param["gpdb_src"]
  - get: #@ conf["res_test_image"]
  - get: #@ conf["res_gpdb_bin"]
- #@ _build_task(conf)
- put: #@ conf["res_intermediates_bin"]
  params:
    file: plcontainer_artifacts/plccontainer*.gppkg
#@ end
