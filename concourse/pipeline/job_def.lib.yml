#@ load("base.lib.yml", "add_res_by_conf", "add_res_by_name")
#@ load("@ytt:template", "template")

#@ def inter_bin_name(base_name, release_build):
#@   if release_build:
#@     return base_name + "_rel"
#@   end
#@
#@   return base_name
#@ end

#! Use bin_gpdb_postfix="" to use a release version of gpdb binary
#! Job config for gpdb6 centos7
#@ def centos7_gpdb6_conf(release_build=False, is_bundle_release=False, container_name_suffix_python="python39.alpine", container_name_suffix_r="r.alpine"):
is_bundle_release: #@ is_bundle_release
res_test_images: [centos7-gpdb6-image-test]
res_gpdb_bin: #@ "bin_gpdb6_centos7" + ("" if release_build else "_debug")
res_intermediates_bin: #@ inter_bin_name("bin_plcontainer_gpdb6_rhel7_intermediates", release_build)
gpdb_version: gpdb6
os: rhel7
container_name_suffix_python: #@ container_name_suffix_python
container_name_suffix_r: #@ container_name_suffix_r
release_bin: bin_plcontainer_gpdb6_rhel7_release
#@   if is_bundle_release:
res_intermediates_tar_python37: #@ inter_bin_name("bin_python_image_gpdb6_intermediates", release_build)
res_intermediates_tar_r: #@ inter_bin_name("bin_r_image_gpdb6_intermediates", release_build)
#@   end
#@ end

#! Job config for gpdb6 rhel8
#@ def rhel8_gpdb6_conf(release_build=False, is_bundle_release=False, container_name_suffix_python="python39.alpine", container_name_suffix_r="r.alpine"):
res_test_images: [rhel8-gpdb6-image-test]
res_gpdb_bin: #@ "bin_gpdb6_rhel8" + ("" if release_build else "_debug")
is_bundle_release: #@ is_bundle_release
res_intermediates_bin:  #@ inter_bin_name("bin_plcontainer_gpdb6_rhel8_intermediates", release_build)
gpdb_version: gpdb6
os: rhel8
container_name_suffix_python: #@ container_name_suffix_python
container_name_suffix_r: #@ container_name_suffix_r
release_bin: bin_plcontainer_gpdb6_rhel8_release
#@ end

#! Job config for gpdb6 ubuntu18
#@ def ubuntu18_gpdb6_conf(release_build=False, is_bundle_release=False, container_name_suffix_python="python39.alpine", container_name_suffix_r="r.alpine"):
res_test_images: [ubuntu18-gpdb6-image-test]
res_gpdb_bin: #@ "bin_gpdb6_ubuntu18" + ("" if release_build else "_debug")
is_bundle_release: #@ is_bundle_release
res_intermediates_bin:  #@ inter_bin_name("bin_plcontainer_gpdb6_ubuntu18_intermediates", release_build)
gpdb_version: gpdb6
os: ubuntu18.04
container_name_suffix_python: #@ container_name_suffix_python
container_name_suffix_r: #@ container_name_suffix_r
release_bin: bin_plcontainer_gpdb6_ubuntu18_release
#@ end

#! Job config for gpdb7 rocky8
#@ def rocky8_gpdb7_conf(release_build=False, is_bundle_release=False, container_name_suffix_python="python39.alpine", container_name_suffix_r="r.alpine"):
res_test_images: [rocky8-gpdb7-image-test, rhel8-gpdb7-image-test]
res_gpdb_bin: #@ "bin_gpdb7_rocky8" + ("" if release_build else "_debug")
is_bundle_release: #@ is_bundle_release
res_intermediates_bin:  #@ inter_bin_name("bin_plcontainer_gpdb7_rocky8_intermediates", release_build)
gpdb_version: gpdb7
os: rocky8
container_name_suffix_python: #@ container_name_suffix_python
container_name_suffix_r: #@ container_name_suffix_r
release_bin: bin_plcontainer_gpdb7_rocky8_release
#@ end

#! Job config for bundle release
#@ def python_image_release_conf():
job_name: push_python_image_release
res_intermediates_tar: #@ inter_bin_name("bin_python_image_gpdb6_intermediates", True)
res_release_bin_image: bin_python37_ubuntu1804_bundle_release
rel_tar_file_name: plcontainer-python-image-*-gp6.tar.gz
version_file: VERSION_bundle_ubuntu1804_py37
#@ end
#@ def r_image_release_conf():
job_name: push_r_image_release
res_intermediates_tar: #@ inter_bin_name("bin_r_image_gpdb6_intermediates", True)
res_release_bin_image: bin_r_ubuntu1804_bundle_release
rel_tar_file_name: plcontainer-r-image-*-gp6.tar.gz
version_file: VERSION_bundle_ubuntu1804_r
#@ end

#! The entry point of a pipeline. The job name must be 'entrance'.
#@ def entrance_job(param):
#@   trigger = param["trigger"]
name: entrance
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- trigger: #@ trigger["auto_trigger"]
  _: #@ template.replace(to_get)
#@   end
#@   for to_put in trigger["to_put_pre"]:
- #@ to_put
#@   end
#@ end

#@ def exit_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#@ def exit_pr_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit_pr
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#@ def _build_task(conf):
task: #@ "build_" + conf["os"]
privileged: true
config:
  platform: linux
  params:
    CONTAINER_NAME_SUFFIX_PYTHON: #@ conf["container_name_suffix_python"]
    CONTAINER_NAME_SUFFIX_R: #@ conf["container_name_suffix_r"]
  run:
    path: plcontainer_src/concourse/scripts/entry.sh
    args:
      - build
  inputs:
    - name: bin_gpdb
    - name: plcontainer_src
    - name: gpdb_src
    - name: bin_cmake
  outputs:
    - name: plcontainer_src
    - name: plcontainer_artifacts
image: #@ conf["res_build_image"] if ("res_build_image" in conf) else conf["res_test_images"][0]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
#@ end

#@ def _test_task(conf):
#@   images = conf['res_test_images']
in_parallel:
#@   for image in images:
#@     test_os = image.split("-")[0]
  - task: #@ "test_" + test_os
    privileged: true
    timeout: 2h
    config:
      platform: linux
      params:
        CONTAINER_NAME_SUFFIX_PYTHON: #@ conf["container_name_suffix_python"]
        CONTAINER_NAME_SUFFIX_R: #@ conf["container_name_suffix_r"]
      inputs:
        - name: bin_gpdb
        - name: gpdb_src
        - name: plcontainer_src
        - name: bin_cmake
        - name: plcontainer_artifacts
      outputs:
        - name: plcontainer_artifacts
      run:
        path: plcontainer_src/concourse/scripts/entry.sh
        args: [test]
    image: #@ image
    input_mapping:
      bin_gpdb: #@ conf["res_gpdb_bin"]
#@   end
#@ end

#@ def build_test_job_name(conf):
#@   return "build_test_" + conf["gpdb_version"] + "_" + conf["os"]
#@ end
#@ def build_test_job(param):
#@   res_map = param["res_map"]
#@   trigger = param["trigger"]
#@   conf = param["conf"]
#@   add_res_by_name(res_map, "bin_cmake")
#@   add_res_by_name(res_map, param["gpdb_src"])
#@   add_res_by_conf(res_map, conf)
name: #@ build_test_job_name(conf)
max_in_flight: 10
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: [entrance]
  trigger: true
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
  - get: bin_cmake
  - get: gpdb_src
    resource: #@ param["gpdb_src"]
#@   for test_image in conf["res_test_images"]:
  - get: #@ test_image
#@   end
  - get: #@ conf["res_gpdb_bin"]
#@ if/end "res_build_image" in conf:
  - get: #@ conf["res_build_image"]
- #@ _build_task(conf)
- #@ _test_task(conf)
- put: #@ conf["res_intermediates_bin"]
  params:
    file: plcontainer_artifacts/plcontainer-gppkg-*.tar.gz
#@   if conf["is_bundle_release"]:
- put: #@ conf["res_intermediates_tar_python37"]
  params:
    file: plcontainer_artifacts/plcontainer-python-image*.tgz
- put: #@ conf["res_intermediates_tar_r"]
  params:
    file: plcontainer_artifacts/plcontainer-r-image*.tgz
#@   end
#@ end

#! The final release job
#! 1. Push the artifacts to the release bucket
#! 2. Push the git tag
#@ def exit_release_job(param, exit_release_name="exit_release"):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   res_map = param["res_map"]
#@   version_file = "VERSION"
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@     add_res_by_name(res_map, conf["release_bin"])
#@   end

name: #@ exit_release_name
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
    steps:

#@ for i, conf in enumerate(confs):
    - do:
      - get: #@ conf["res_intermediates_bin"]
        passed:
          - #@ passed_jobs[i]
        params:
          unpack: true
      - put: #@ conf["release_bin"]
        params:
          file: #@ conf["res_intermediates_bin"] + "/plcontainer*.gppkg"
#@ end
#@ for to_put in trigger["to_put_post"]:
- put: plcontainer_commit
  params:
    repository: plcontainer_src
    tag: #@ "plcontainer_src/" + version_file
#@   end
#@ end

#! Image release job
#@ def image_release_job(param):
#@   trigger = param["trigger"]
#@   conf = param["conf"]
#@   res_map = param["res_map"]
#@   rel_conf = param["rel_conf"]
#@   passed_jobs = []
#@   passed_jobs.append(build_test_job_name(conf))
#@   version_file = rel_conf["version_file"]
#@   add_res_by_conf(res_map, rel_conf)
name: #@ rel_conf["job_name"]
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
    steps:
    - do:
      - get: intermediates
        resource: #@ rel_conf["res_intermediates_tar"]
        params:
          unpack: true
      - put: #@ rel_conf["res_release_bin_image"]
        params:
          file: #@ "intermediates/" + rel_conf["rel_tar_file_name"]
#@   for to_put in trigger["to_put_post"]:
- put: plcontainer_commit
  params:
    repository: plcontainer_src
    tag: #@ "plcontainer_src/" + version_file
#@   end
#@ end
