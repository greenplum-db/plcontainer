-- Install a helper function to inject faults, using the fault injection
-- mechanism built into the server.
set log_min_messages='DEBUG1';
CREATE EXTENSION gp_inject_fault;
CREATE OR REPLACE FUNCTION pyint(i int) RETURNS int AS $$
# container: plc_python_shared
return i+1
$$ LANGUAGE plcontainer;
CREATE TABLE tbl(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO tbl SELECT * FROM generate_series(1, 10);
-- reset the injection points
SELECT gp_inject_fault('plcontainer_before_container_started', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_container_connected', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_send_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_recv_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_udf_finish', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

-- start_ignore
-- QE crash after start a container
show optimizer;
 optimizer 
-----------
 off
(1 row)

SELECT gp_inject_fault('plcontainer_before_container_started', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_container_started' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=3066)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` docker ps -a </dev/null | wc -l
1
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT sum(pyint(i)) from tbl;
 sum 
-----
  65
(1 row)

-- start_ignore
-- Start a container
-- QE crash when connnecting to an existing container
SELECT gp_inject_fault('plcontainer_before_container_connected', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_container_connected' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=3254)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` docker ps -a </dev/null | wc -l
1
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT sum(pyint(i)) from tbl;
 sum 
-----
  65
(1 row)

-- start_ignore
SELECT gp_inject_fault('plcontainer_after_send_request', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_after_send_request' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=3434)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` docker ps -a </dev/null | wc -l
1
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT sum(pyint(i)) from tbl;
 sum 
-----
  65
(1 row)

-- start_ignore
SELECT gp_inject_fault('plcontainer_after_recv_request', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_after_recv_request' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=3612)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` docker ps -a </dev/null | wc -l
1
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT sum(pyint(i)) from tbl;
 sum 
-----
  65
(1 row)

-- start_ignore
SELECT gp_inject_fault('plcontainer_before_udf_finish', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_udf_finish' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=3797)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` docker ps -a </dev/null | wc -l
1
\! ssh `psql -d ${PL_TESTDB} -c 'select address from gp_segment_configuration where dbid=2' -t -A` ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
-- reset the injection points
SELECT gp_inject_fault('plcontainer_before_container_started', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_container_connected', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_send_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_recv_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_udf_finish', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

DROP TABLE tbl;
-- reset the injection points
SELECT gp_inject_fault('plcontainer_before_container_started', 'reset', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_send_request', 'reset', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

-- After QE log(error, ...), related docker containers should be deleted.
-- Test on entrydb.
-- start_ignore
show optimizer;
 optimizer 
-----------
 off
(1 row)

SELECT gp_inject_fault('plcontainer_before_container_started', 'error', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(0);
ERROR:  fault triggered, fault name:'plcontainer_before_container_started' fault type:'error'
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a </dev/null | wc -l
1
\! ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT pyint(1);
 pyint 
-------
     2
(1 row)

-- start_ignore
SELECT gp_inject_fault('plcontainer_after_send_request', 'error', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(2);
ERROR:  fault triggered, fault name:'plcontainer_after_send_request' fault type:'error'
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a </dev/null | wc -l
1
\! ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
0
SELECT pyint(3);
 pyint 
-------
     4
(1 row)

-- Detect for the process name change (from "plcontainer cleaner" to other).
-- In such case, above cases will still succeed as unexpected.
\! docker ps -a </dev/null | wc -l
2
\! ps -ef </dev/null | grep -v grep | grep "plcontainer cleaner" | wc -l
1
-- reset the injection points
SELECT gp_inject_fault('plcontainer_before_container_started', 'reset', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_send_request', 'reset', 1);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

DROP FUNCTION pyint(i int);
DROP EXTENSION gp_inject_fault;
