--
-- import numpy
--
create or replace function numpy_test() RETURNS TEXT AS $$
# container: plc_python_shared
import numpy
a = numpy.arange(15).reshape(3, 5)
return "Success!"
$$ LANGUAGE plcontainer;
SELECT numpy_test();
 numpy_test
------------
 Success!
(1 row)

DROP FUNCTION numpy_test();
--
-- import scipy
--
create or replace function scipy_test() RETURNS TEXT AS $$
# container: plc_python_shared
import sys
if not hasattr(sys, 'argv'):
    sys.argv  = ['']
import scipy
f = lambda x: -scipy.special.jv(3, x)
return "Success!"
$$ LANGUAGE plcontainer;
SELECT scipy_test();
 scipy_test
------------
 Success!
(1 row)

DROP FUNCTION scipy_test();
--
-- import pandas
--
create or replace function pandas_test() RETURNS TEXT AS $$
# container: plc_python_shared
import pandas
import numpy
s = pandas.Series([1,3,5,numpy.nan,6,8])
return "Success!"
$$ LANGUAGE plcontainer;
SELECT pandas_test();
 pandas_test
-------------
 Success!
(1 row)

DROP FUNCTION pandas_test();
--
-- import pyLDAvis
--
create or replace function pyldavis_test() RETURNS TEXT AS $$
# container: plc_python_shared
import pyLDAvis
version = pyLDAvis.__version__
return "Success!"
$$ LANGUAGE plcontainer;
SELECT pyldavis_test();
 pyldavis_test
---------------
 Success!
(1 row)

DROP FUNCTION pyldavis_test();
--
-- import gensim
--
create or replace function gensim_test() RETURNS TEXT AS $$
# container: plc_python_shared
import gensim
corpus = [[(0, 1.0), (1, 1.0), (2, 1.0)],[(2, 1.0), (3, 1.0), (4, 1.0), (5, 1.0), (6, 1.0), (8, 1.0)]]
tfidf = gensim.models.TfidfModel(corpus)
return "Success!"
$$ LANGUAGE plcontainer;
SELECT gensim_test();
 gensim_test
-------------
 Success!
(1 row)

DROP FUNCTION gensim_test();
--
-- import xgboost
--
create or replace function xgboost_test() RETURNS TEXT AS $$
# container: plc_python_shared
import numpy as np
import xgboost as xgb
# generate data in numpy
data = np.random.rand(5,10)
label = np.random.randint(2, size=5)

dtrain = xgb.DMatrix( data, label=label)

return "Success!"
$$ LANGUAGE plcontainer;
SELECT xgboost_test();
 xgboost_test
--------------
 Success!
(1 row)

DROP FUNCTION xgboost_test();
--
-- import sklearn
--
create or replace function sklearn_test() RETURNS TEXT AS $$
# container: plc_python_shared
from sklearn import datasets
from sklearn.cross_validation import cross_val_predict
from sklearn import linear_model
lr = linear_model.LinearRegression()
return "Success!"
$$ LANGUAGE plcontainer;
SELECT sklearn_test();
 sklearn_test
--------------
 Success!
(1 row)

DROP FUNCTION sklearn_test();
--
-- import lifelines
--
create or replace function lifelines_test() RETURNS TEXT AS $$
# container: plc_python_shared
import lifelines
cph = lifelines.CoxPHFitter()
return "Success!"
$$ LANGUAGE plcontainer;
SELECT lifelines_test();
 lifelines_test
----------------
 Success!
(1 row)

DROP FUNCTION lifelines_test();
--
-- import pattern
--
create or replace function pattern_test() RETURNS TEXT AS $$
# container: plc_python_shared
import pattern.en
from pattern.web import Twitter
twitter = Twitter()
return "Success!"
$$ LANGUAGE plcontainer;
SELECT pattern_test();
 pattern_test
--------------
 Success!
(1 row)

DROP FUNCTION pattern_test();
--
-- download spacy
--
\! python -m spacy download en
/usr/local/greenplum-db-devel/ext/python/bin/python: No module named spacy
create or replace function spacy_test() RETURNS TEXT AS $$
# container: plc_python_shared
import sys
if not hasattr(sys, 'argv'):
    sys.argv  = ['']
import spacy
nlp = spacy.load('en')
doc = nlp(u'this is a spacy tokenizer test.')

return "Success!"
$$ LANGUAGE plcontainer;
SELECT spacy_test();
 spacy_test
------------
 Success!
(1 row)

DROP FUNCTION spacy_test();
--
-- import lxml
--
create or replace function lxml_test() RETURNS TEXT AS $$
# container: plc_python_shared
import lxml
from lxml import etree
xml = '<a xmlns="test"><b xmlns="test"/></a>'
t = etree.fromstring(xml)
return "Success!"
$$ LANGUAGE plcontainer;
SELECT lxml_test();
 lxml_test
-----------
 Success!
(1 row)

DROP FUNCTION lxml_test();
--
-- import statsmodels
--
create or replace function statsmodels_test() RETURNS TEXT AS $$
# container: plc_python_shared
import numpy as np
import statsmodels.nonparametric.api as nparam
italy_gdp =[8.556, 12.262, 9.587, 8.119, 5.537, 6.796, 8.638]
italy_year = [1951, 1951, 1951, 1951, 1951, 1951, 1951]
italy_year = np.asarray(italy_year, float)
model = nparam.KernelReg(endog=[italy_gdp],
                         exog=[italy_year],
                         reg_type='lc',
                         var_type='o',
                         bw='cv_ls')

return "Success!"
$$ LANGUAGE plcontainer;
SELECT statsmodels_test();
 statsmodels_test
------------------
 Success!
(1 row)

DROP FUNCTION statsmodels_test();
--
-- import BeautifulSoup
--
create or replace function beautifulsoup_test() RETURNS TEXT AS $$
# container: plc_python_shared
from bs4 import BeautifulSoup
text="<!DOCTYPE html><!--STATUS OK--><html> <head>TEST</head><body>TEST bs4</body></html>"
soup=BeautifulSoup(text, "lxml")
result = soup.find_all('head')
return "Success!"
$$ LANGUAGE plcontainer;
SELECT beautifulsoup_test();
 beautifulsoup_test
--------------------
 Success!
(1 row)

DROP FUNCTION beautifulsoup_test();
--
-- import pymc3
--
create or replace function pymc3_test() RETURNS TEXT AS $$
# container: plc_python_shared
from pymc3 import Model, Normal, HalfNormal
basic_model = Model()
return "Success!"
$$ LANGUAGE plcontainer;
SELECT pymc3_test();
 pymc3_test
------------
 Success!
(1 row)

DROP FUNCTION pymc3_test();
--
-- import nltk
--
create or replace function nltk_test() RETURNS TEXT AS $$
# container: plc_python_shared
import nltk
version=nltk.__version__

return "Success!"
$$ LANGUAGE plcontainer;
SELECT nltk_test();
 nltk_test
-----------
 Success!
(1 row)

DROP FUNCTION nltk_test();
--
-- import keras
--
create or replace function keras_test() RETURNS TEXT AS $$
# container: plc_python_shared
import sys
sys.argv=['']
from keras.models import Sequential
model = Sequential()
return "Success!"
$$ LANGUAGE plcontainer;
SELECT keras_test();
 keras_test
------------
 Success!
(1 row)

DROP FUNCTION keras_test();
--
-- import tensorflow
--
create or replace function tensorflow_test() RETURNS TEXT AS $$
# container: plc_python_shared
import sys
sys.argv=['']
import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))

return "Success!"
$$ LANGUAGE plcontainer;
SELECT tensorflow_test();
 tensorflow_test
-----------------
 Success!
(1 row)

DROP FUNCTION tensorflow_test();
