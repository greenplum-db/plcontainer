-- Install a helper function to inject faults, using the fault injection
-- mechanism built into the server.
CREATE EXTENSION gp_inject_fault;
CREATE OR REPLACE FUNCTION pyint(i int) RETURNS int AS $$
# container: plc_python_shared
return i+1
$$ LANGUAGE plcontainer;
CREATE TABLE tbl(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO tbl SELECT * FROM generate_series(1, 10);
-- start_ignore
-- QE crash after start a container 
SELECT gp_inject_fault('plcontainer_before_container_started', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_container_started' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=32639)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a | wc -l
1
\! ps -ef | grep "plcontainer cleaner" | grep -v pg_regress | wc -l
1
-- start_ignore
-- Start a container
SELECT pyint(i) from tbl;
 pyint 
-------
     2
     4
     6
     8
    10
     3
     5
     7
     9
    11
(10 rows)

-- QE crash when connnecting to an existing container
SELECT gp_inject_fault('plcontainer_before_container_connected', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_container_connected' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=300)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a | wc -l
1
\! ps -ef | grep "plcontainer cleaner" | grep -v pg_regress | wc -l
1
-- start_ignore
SELECT gp_inject_fault('plcontainer_after_send_request', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_after_send_request' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=453)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a | wc -l
1
\! ps -ef | grep "plcontainer cleaner" | grep -v pg_regress | wc -l
1
-- start_ignore
SELECT gp_inject_fault('plcontainer_after_recv_request', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_after_recv_request' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=580)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a | wc -l
1
\! ps -ef | grep "plcontainer cleaner" | grep -v pg_regress | wc -l
1
-- start_ignore
SELECT gp_inject_fault('plcontainer_before_udf_finish', 'fatal', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT pyint(i) from tbl;
ERROR:  fault triggered, fault name:'plcontainer_before_udf_finish' fault type:'fatal'  (seg0 slice1 127.0.0.1:25432 pid=731)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- end_ignore
\! docker ps -a | wc -l
1
\! ps -ef | grep "plcontainer cleaner" | grep -v pg_regress | wc -l
1
-- reset the injection points
SELECT gp_inject_fault('plcontainer_before_container_started', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_container_connected', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_send_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_after_recv_request', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

SELECT gp_inject_fault('plcontainer_before_udf_finish', 'reset', 2);
NOTICE:  Success:
 gp_inject_fault 
-----------------
 t
(1 row)

