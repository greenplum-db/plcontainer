CREATE OR REPLACE FUNCTION load_r_typenames() RETURNS text AS $$
# container: plc_r_shared
sql <- "select upper(typname::text) || 'OID' as typename, oid from pg_catalog.pg_type where typtype = 'b' order by typname"
rs <- pg.spi.exec(sql)
for(i in 1:nrow(rs))
{
  typobj <- rs[i,1]
  typval <- rs[i,2]
  if (substr(typobj,1,1) == "_")
        typobj <- paste("ARRAYOF", substr(typobj,2,nchar(typobj)), sep="")
          assign(typobj, typval, .GlobalEnv)
}
return("OK")
$$ language plcontainer;
SELECT load_r_typenames();
 load_r_typenames 
------------------
 OK
(1 row)

----- Test text, bool, char, int4
DROP TABLE if exists t2r;
NOTICE:  table "t2r" does not exist, skipping
create TABLE t2r (name text, online bool, sex char, id int4);
INSERT INTO t2r values('bob1', true, 'm', 7000);
INSERT INTO t2r values('bob1', true, 'm', 8000);
INSERT INTO t2r values('bob1', true, 'm', 9000);
INSERT INTO t2r values('bob2', true, 'f', 9001);
INSERT INTO t2r values('bob3', false, 'm', 9002);
INSERT INTO t2r values('alice1', false, 'm', 9003);
INSERT INTO t2r values('alice2', false, 'f', 9004);
INSERT INTO t2r values('alice3', true, 'm', 9005);
CREATE OR REPLACE FUNCTION r_spi_pexecute1() RETURNS void AS $$
# container: plc_r_shared
plr.notice("Test query execution")
rv <- pg.spi.exec("select * from t2r where name='bob1' and online=True and sex='m' order by id limit 2")
for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test text")
plan = pg.spi.prepare("select * from t2r where name=$1 order by id", c(TEXTOID))
rv = pg.spi.execp(plan, list("bob1"))
for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test bool")
plan <- pg.spi.prepare("select * from t2r where online=$1 order by id", c(BOOLOID))
rv <- pg.spi.execp(plan, list(TRUE))
for(i in 1:nrow(rv)){
	plr.notice(rv[i,1])
}

plan1 <- pg.spi.prepare("select * from t2r where sex=$1 order by id", c(CHAROID))
plan2 <- pg.spi.prepare("select * from t2r where id>$1 order by id", c(INT4OID))
plr.notice("Test int4")
rv <- pg.spi.execp(plan2, list(9001))

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test char")
rv <- pg.spi.execp(plan1, list('m'))

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test text+bool+char+int4")
plan <- pg.spi.prepare("select * from t2r where name=$1 and online=$2 and sex=$3 order by id limit $4", c(TEXTOID, BOOLOID, CHAROID, INT4OID))
rv <- pg.spi.execp(plan, list("bob1", TRUE, 'm', 2));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
select r_spi_pexecute1();
NOTICE:  Test query execution
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  Test text
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  Test bool
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  bob2
NOTICE:  alice3
NOTICE:  Test int4
NOTICE:  bob3
NOTICE:  alice1
NOTICE:  alice2
NOTICE:  alice3
NOTICE:  Test char
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  bob1
NOTICE:  bob3
NOTICE:  alice1
NOTICE:  alice3
NOTICE:  Test text+bool+char+int4
NOTICE:  bob1
NOTICE:  bob1
 r_spi_pexecute1 
-----------------
 
(1 row)

drop table if exists t2r;
----- Test text, int2, int8
drop table if exists t3r;
NOTICE:  table "t3r" does not exist, skipping
create table t3r (name text, age int2, id int8);
insert into t3r values('bob0', 20, 9000);
insert into t3r values('bob1', 20, 8000);
insert into t3r values('bob2', 30, 7000);
insert into t3r values('alice1', 40, 6000);
insert into t3r values('alice2', 50, 6001);
CREATE OR REPLACE FUNCTION r_spi_pexecute2() RETURNS void AS $$
# container: plc_r_shared

plr.notice("Test int2")
plan <- pg.spi.prepare("select * from t3r where age=$1 order by id", c(INT2OID))
rv <- pg.spi.execp(plan, list(20));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test int8")
plan <- pg.spi.prepare("select * from t3r where id<$1 order by id", c(INT8OID))
rv <- pg.spi.execp(plan, list(6002));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test text + int8")
plan <- pg.spi.prepare("select * from t3r where name=$1 and age=$2 order by id", c(TEXTOID, INT8OID))
rv <- pg.spi.execp(plan, list("bob0", 20));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
select r_spi_pexecute2();
NOTICE:  Test int2
NOTICE:  bob1
NOTICE:  bob0
NOTICE:  Test int8
NOTICE:  alice1
NOTICE:  alice2
NOTICE:  Test text + int8
NOTICE:  bob0
 r_spi_pexecute2 
-----------------
 
(1 row)

drop table if exists t3r;
----- Test bytea, float4, float8
drop table if exists t4r;
NOTICE:  table "t4r" does not exist, skipping
create table t4r (name bytea, score1 float4, score2 float8);
insert into t4r values('bob0', 8.5, 16.5);
insert into t4r values('bob1', 8.75, 16.75);
insert into t4r values('bob2', 8.875, 16.875);
insert into t4r values('bob3', 9.125, 16.125);
insert into t4r values('bob4', 9.25, 16.25);
CREATE OR REPLACE FUNCTION r_spi_pexecute3() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where name=$1 order by score1", c(BYTEAOID))
plan2 <- pg.spi.prepare("select * from t4r where score1<$1 order by name", c(FLOAT4OID))
plan3 <- pg.spi.prepare("select * from t4r where score2<$1 order by name", c(FLOAT8OID))
plan4 <- pg.spi.prepare("select * from t4r where score1<$1 and score2<$2 order by name", c(FLOAT4OID, FLOAT8OID))

plr.notice("Test bytea");
rv <- pg.spi.execp(plan1, list('bob0'));

plr.notice("Test float4");
rv <- pg.spi.execp(plan2, list(8.9));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test float8");
rv <- pg.spi.execp(plan3, list(16.8));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

plr.notice("Test float4+float8");
rv <- pg.spi.execp(plan4, list(9.18, 16.80));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
select r_spi_pexecute3();
NOTICE:  Test bytea
NOTICE:  Test float4
NOTICE:  bob0
NOTICE:  bob1
NOTICE:  bob2
NOTICE:  Test float8
NOTICE:  bob0
NOTICE:  bob1
NOTICE:  bob3
NOTICE:  bob4
NOTICE:  Test float4+float8
NOTICE:  bob0
NOTICE:  bob1
NOTICE:  bob3
 r_spi_pexecute3 
-----------------
 
(1 row)

----- Do not drop table t4 here since it is used below.
----- negative tests
CREATE OR REPLACE FUNCTION r_spi_illegal_pexecute1() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where name=$1 order by score1", c(INT4OID))
rv <- pg.spi.execp(plan1, list("bob0"));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION r_spi_illegal_pexecute2() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where score1<$1 order by score1", c(BYTEAOID))
rv <- pg.spi.execp(plan1, list("bob0"));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION r_spi_illegal_pexecute3() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where score1<$1 order by score1", c(FLOAT4OID))
rv <- pg.spi.execp(plan1, list("bob0"));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION r_spi_illegal_pexecute4() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where score1<$1 and score2<$2 order by score1", c(FLOAT4OID, FLOAT8OID))
rv <- pg.spi.execp(plan1, list(9.5, "bob0"));

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION r_spi_simple_t4() RETURNS void AS $$
# container: plc_r_shared

plan1 <- pg.spi.prepare("select * from t4r where name='bob0' order by score1")
rv <- pg.spi.execp(plan1);

for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}

$$ LANGUAGE plcontainer;
select r_spi_simple_t4();
NOTICE:  bob0
 r_spi_simple_t4 
-----------------
 
(1 row)

select r_spi_illegal_pexecute1();
ERROR:  operator does not exist: bytea = integer
LINE 1: select * from t4r where name=$1 order by score1
                                    ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
QUERY:  select * from t4r where name=$1 order by score1
select r_spi_illegal_pexecute2();
ERROR:  PL/Container client exception occurred: 
 Error in pg.spi.prepare("select * from t4r where score1<$1 order by score1",  : 
  object 'BYTEAOID' not found
select r_spi_simple_t4();
NOTICE:  bob0
 r_spi_simple_t4 
-----------------
 
(1 row)

select r_spi_illegal_pexecute3();
ERROR:  PL/Container client exception occurred: 
 Error in pg.spi.prepare("select * from t4r where score1<$1 order by score1",  : 
  object 'FLOAT4OID' not found
select r_spi_illegal_pexecute4();
ERROR:  PL/Container client exception occurred: 
 Error in pg.spi.prepare("select * from t4r where score1<$1 and score2<$2 order by score1",  : 
  object 'FLOAT4OID' not found
select r_spi_simple_t4();
NOTICE:  bob0
 r_spi_simple_t4 
-----------------
 
(1 row)

CREATE OR REPLACE FUNCTION rspi_illegal_sql() RETURNS integer AS $$
# container: plc_r_shared
rs <- pg.spi.exec("select datname from pg_database_invalid");
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_illegal_sql_pexecute() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("select datname from pg_database_invalid");
rv <- pg.spi.execp(plan);
return (0)
$$ LANGUAGE plcontainer;
select r_spi_simple_t4();
NOTICE:  bob0
 r_spi_simple_t4 
-----------------
 
(1 row)

select rspi_illegal_sql();
ERROR:  relation "pg_database_invalid" does not exist
LINE 1: select datname from pg_database_invalid
                            ^
QUERY:  select datname from pg_database_invalid
select rspi_illegal_sql_pexecute();
ERROR:  relation "pg_database_invalid" does not exist
LINE 1: select datname from pg_database_invalid
                            ^
QUERY:  select datname from pg_database_invalid
select r_spi_simple_t4();
NOTICE:  bob0
 r_spi_simple_t4 
-----------------
 
(1 row)

----- Now drop t4.
drop table t4r;
-- test SPI update, insert and delete
drop table if exists t5r;
NOTICE:  table "t5r" does not exist, skipping
create table t5r (name text, score1 float4, score2 float8);
insert into t5r values('bob0', 8.5, 16.5);
insert into t5r values('bob1', 8.75, 16.75);
-- execute
CREATE OR REPLACE FUNCTION rspi_insert_exec() RETURNS integer AS $$
# container: plc_r_shared
rv <- pg.spi.exec("insert into t5r values('bob2', 8.5, 16.5)");
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_update_exec() RETURNS integer AS $$
# container: plc_r_shared
rv <- pg.spi.exec("update t5r set score1=11 where name='bob2'");
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_delete_exec() RETURNS integer AS $$
# container: plc_r_shared
rv <- pg.spi.exec("delete from t5r where name='bob2'");
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
SELECT rspi_insert_exec();
NOTICE:  1
 rspi_insert_exec 
------------------
                0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
 bob2 |    8.5 |   16.5
(3 rows)

SELECT rspi_update_exec();
NOTICE:  1
 rspi_update_exec 
------------------
                0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
 bob2 |     11 |   16.5
(3 rows)

SELECT rspi_delete_exec();
NOTICE:  1
 rspi_delete_exec 
------------------
                0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
(2 rows)

-- executep
CREATE OR REPLACE FUNCTION rspi_insert_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("insert into t5r values('bob3', 8.5, 16.5)");
rv <- pg.spi.execp(plan);
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_update_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("update t5r set score1=12 where name='bob3'");
rv <- pg.spi.execp(plan);
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_delete_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("delete from t5r where name='bob3'");
rv <- pg.spi.execp(plan);
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_select_notexist_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("select * from t5r where name='bob_notexist'");
rv <- pg.spi.execp(plan);
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
CREATE OR REPLACE FUNCTION rspi_delete_notexist_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("delete from t5r where name='bob_notexist'");
rv <- pg.spi.execp(plan);
plr.notice(rv)
return (0)
$$ LANGUAGE plcontainer;
SELECT rspi_insert_execp();
NOTICE:  1
 rspi_insert_execp 
-------------------
                 0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
 bob3 |    8.5 |   16.5
(3 rows)

SELECT rspi_update_execp();
NOTICE:  1
 rspi_update_execp 
-------------------
                 0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
 bob3 |     12 |   16.5
(3 rows)

SELECT rspi_delete_execp();
NOTICE:  1
 rspi_delete_execp 
-------------------
                 0
(1 row)

SELECT * FROM t5r order by name;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
(2 rows)

-- Test returns 0 row X N cols.
select rspi_select_notexist_execp();
NOTICE:  NA
 rspi_select_notexist_execp 
----------------------------
                          0
(1 row)

-- Test returns 0 row X 0 col.
select rspi_delete_notexist_execp();
NOTICE:  0
 rspi_delete_notexist_execp 
----------------------------
                          0
(1 row)

-- insert returns N rows * 0 col, so there is no need of additional case.
insert into t5r values(null, 18.75, 26.75);
insert into t5r values(null, 28.75, 26.75);
insert into t5r values(null, 38.75, 26.75);
SELECT load_r_typenames();
 load_r_typenames 
------------------
 OK
(1 row)

CREATE OR REPLACE FUNCTION rspi_select_null_execp() RETURNS integer AS $$
# container: plc_r_shared
plan <- pg.spi.prepare("select * from t5r order by name");
rv <- pg.spi.execp(plan);
for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}
plan1 <- pg.spi.prepare("insert into t5r values($1, 48.75, 26.75)", c(TEXTOID));
rv <- pg.spi.execp(plan1, list(NULL));
plan2 <- pg.spi.prepare("select * from t5r order by name");
rv <- pg.spi.execp(plan2);
for(i in 1:nrow(rv)){
    plr.notice(rv[i,1])
}
return (0)
$$ LANGUAGE plcontainer;
SELECT rspi_select_null_execp();
NOTICE:  bob0
NOTICE:  bob1
NOTICE:  NA
NOTICE:  NA
NOTICE:  NA
NOTICE:  bob0
NOTICE:  bob1
NOTICE:  NA
NOTICE:  NA
NOTICE:  NA
NOTICE:  NA
 rspi_select_null_execp 
------------------------
                      0
(1 row)

SELECT * FROM t5r order by score1;
 name | score1 | score2 
------+--------+--------
 bob0 |    8.5 |   16.5
 bob1 |   8.75 |  16.75
      |  18.75 |  26.75
      |  28.75 |  26.75
      |  38.75 |  26.75
      |  48.75 |  26.75
(6 rows)

DROP TABLE t5r;
