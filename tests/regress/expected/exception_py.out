-- Test trigger (not supported at this moment).
CREATE TABLE trigger_tbl (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE OR REPLACE FUNCTION test_trigger_func() RETURNS TRIGGER AS $$
# container: plc_python_shared
plpy.notice("trigger not supported");
$$ LANGUAGE plcontainer;
CREATE TRIGGER test_trigger AFTER INSERT ON trigger_tbl FOR EACH ROW EXECUTE PROCEDURE test_trigger_func();
INSERT INTO trigger_tbl values(0);
ERROR:  plcontainer: PL/Container does not support triggers (plcontainer.c:86)  (seg1 127.0.0.1:25433 pid=13966)
DROP TRIGGER test_trigger on trigger_tbl;
DROP TABLE trigger_tbl;
--  Test <defunct> processes are reaped after a new backend is created.
select pykillself();
ERROR:  plcontainer: Error receiving data from the client. Maybe retry later. (plcontainer.c:255)
SELECT pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- Wait for 5 seconds so that cleanup processes exit.
\!ps -ef |grep [p]ostgres|grep defunct |wc -l
1
-- Then start the backend so that those <defunct> processes could be reaped.
select pyzero();
 pyzero 
--------
      0
(1 row)

\!ps -ef |grep [p]ostgres|grep defunct |wc -l
0
-- Test function ok immediately after container is kill-9-ed.
select pykillself();
ERROR:  plcontainer: Error receiving data from the client. Maybe retry later. (plcontainer.c:255)
select pyzero();
 pyzero 
--------
      0
(1 row)

-- Test function ok immediately after container captures signal sigsegv.
select pysegvself();
ERROR:  plcontainer: Error receiving data from the client. Maybe retry later. (plcontainer.c:255)
select pyzero();
 pyzero 
--------
      0
(1 row)

-- Test function ok immediately after container exits.
select pyexit();
ERROR:  plcontainer: Error receiving data from the client. Maybe retry later. (plcontainer.c:255)
select pyzero();
 pyzero 
--------
      0
(1 row)

